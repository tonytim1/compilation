/*************/
/* IMPORT(S); */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal EQ;
terminal GT;
terminal LT;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal ARRAY;
terminal CLASS;
terminal COMMA;
terminal ERROR;
terminal EXTENDS;
terminal NEW;
terminal NIL;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal RETURN;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_BINOP binop;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM program;
non terminal AST_DEC dec;
non terminal AST_DEC_LIST decList;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_TYPE_DEF arrayTypeDef;
non terminal AST_TYPE type;
non terminal AST_TYPE_ID typeID;
non terminal AST_TYPE_ID_LIST typeIDList;
non terminal AST_C_FIELD cField;
non terminal AST_C_FIELD_LIST cFieldList;
non terminal AST_VAR_SIMPLE varSimple;
non terminal AST_VAR_FIELD varField;
non terminal AST_VAR_SUBSCRIPT varSubscript;
non terminal AST_STMT_ASSIGN stmtAssign;
non terminal AST_STMT_ASSIGN_NEW stmtAssignNew;
non terminal AST_STMT_RETURN stmtReturn;
non terminal AST_STMT_IF stmtIf;
non terminal AST_STMT_WHILE stmtWhile;
non terminal AST_EXP_LIST expList;
non terminal AST_EXP_VAR expVar;
non terminal AST_EXP_PAREN expParen;
non terminal AST_EXP_BINOP expBinop;
non terminal AST_EXP_INT expInt;
non terminal AST_EXP_NIL nil;
//non terminal AST_EXP_STRING expString;
non terminal AST_NEW_EXP newExp;
non terminal AST_VAR_EXP_LIST varExpList;
non terminal AST_VAR_EXP_LIST_STMT varExpListStmt;

//non terminal AST_Node RESULT;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left EQ;
precedence left GT;
precedence left LT;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/


program ::= decList:l {: RESULT = new AST_PROGRAM(l); :}
            ;

decList ::= dec:d decList:l		{: RESULT = new AST_DEC_LIST(d,l);    :}
			| dec:d				{: RESULT = new AST_DEC_LIST(d,null); :}
			;

dec ::= varDec:v {: RESULT = new AST_DEC_VAR(v); :}
        | funcDec:f {: RESULT = new AST_DEC_FUNC(f); :}
        | classDec:c {: RESULT = new AST_DEC_CLASS(c); :}
        | arrayTypeDef:a {: RESULT = new AST_DEC_ARRAY(a); :}
        ;

type ::== TYPE_INT {: RESULT = new AST_TYPE(1); :}
        | TYPE_STRING {: RESULT = new AST_TYPE(2); :}
        | TYPE_VOID {: RESULT = new AST_TYPE(3); :}
        | ID:name  {: RESULT = new AST_TYPE(name); :}
        ;

arrayTypeDef ::= ARRAY ID:name ASSIGN type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF(name, t); :}
        ;


varDec ::= type:t ID:name {: RESULT = new AST_VAR_DEC(t, name, null, null); :}
           | type:t ID:name ASSIGN exp:e {: RESULT = new AST_VAR_DEC(t, name, e, null); :}
           | type:t ID:name ASSIGN newExp:new_e {: RESULT = new AST_VAR_DEC(t, name, null, new_e); :}
           ;

funcDec ::= type:t ID:name LPAREN typeIDList:tid RPAREN LBRACE stmtList:st RBRACE {: RESULT = new AST_FUNC_DEC(t, name, tid, st); :}
            | type:t ID:name LPAREN RPAREN LBRACE stmtList:st RBRACE {: RESULT = new AST_FUNC_DEC(t, name, null, st); :}
            ;

typeIDList	::=		typeID:t COMMA typeIDList:l		{: RESULT = new AST_TYPE_ID_LIST(t,l);    :}
					| typeID:t				{: RESULT = new AST_TYPE_ID_LIST(t,null); :}
					;

typeID ::= type:t ID:name {: RESULT = new AST_TYPE_ID(t, name); :}
           ;



classDec ::= CLASS ID:name LBRACE cFieldList:cfl RBRACE {: RESULT = new AST_CLASS_DEC(name, null, cfl); :}
             CLASS ID:name EXTENDS ID:name2 LBRACE cFieldList:cfl RBRACE {: RESULT = new AST_CLASS_DEC(name, name2, cfl); :}
             ;

cField ::= varDec:v {: RESULT = new AST_C_FIELD_VAR(v); :}
            | funcDec:f {: RESULT = new AST_C_FIELD_FUNC(f); :}
            ;

cFieldList	::=		cField:c	cFieldList:l		{: RESULT = new AST_C_FIELD_LIST(c,l);    :}
					| cField:c				{: RESULT = new AST_C_FIELD_LIST(c,null); :}
					;


stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:name			{: RESULT = new AST_VAR_FIELD(v,name); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		varDec:v {: RESULT = new AST_STMT_VAR_DEC(v); :}
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | var:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN_NEW(v,e); :}
                    | RETURN exp:e SEMICOLON								{: RESULT = new AST_STMT_RETURN(e); :}
                    | RETURN SEMICOLON								{: RESULT = new AST_STMT_RETURN(null); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| ID:name LPAREN expList:e RPAREN SEMICOLON   {: RESULT = new AST_VAR_EXP_LIST_STMT(null, e, name); :}
                    | ID:name LPAREN RPAREN SEMICOLON   {: RESULT = new AST_VAR_EXP_LIST_STMT(null, null, name); :}
                    | var:v DOT ID:name LPAREN RPAREN SEMICOLON   {: RESULT = new AST_VAR_EXP_LIST_STMT(v, null, name); :}
                    | var:v DOT ID:name LPAREN expList:e RPAREN SEMICOLON   {: RESULT = new AST_VAR_EXP_LIST_STMT(v, e, name); :}
					;

expList ::=         exp:e COMMA expList:l		{: RESULT = new AST_EXP_LIST(e,l);    :}
					| exp:e				        {: RESULT = new AST_EXP_LIST(e,null); :}
					;


exp			::=		var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_PAREN(e);:}
					| exp:e1 binop:op  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, op);:}
                    | INT:i                             {: RESULT = new AST_EXP_INT(i, 0); :}
                    | MINUS INT:i                       {: RESULT = new AST_EXP_INT(i, 1); :}
                    | NIL                             {: RESULT = new AST_EXP_NIL(); :}
                    | STRING:s                             {: RESULT = new AST_EXP_STRING(s); :}
                    | ID:name LPAREN expList:e RPAREN    {: RESULT = new AST_VAR_EXP_LIST(null, e, name); :}
                    | ID:name LPAREN RPAREN    {: RESULT = new AST_VAR_EXP_LIST(null, null, name); :}
                    | var:v DOT ID:name LPAREN RPAREN    {: RESULT = new AST_VAR_EXP_LIST(v, null, name); :}
                    | var:v DOT ID:name LPAREN expList:e RPAREN    {: RESULT = new AST_VAR_EXP_LIST(v, e, name); :}
                    ;

newExp      ::=     NEW type:t                          {: RESULT = new AST_NEW_EXP(t, null); :}
                    | NEW type:t LBRACK exp:e RBRACK    {: RESULT = new AST_NEW_EXP(t, e); :}
                    ;

binop       ::=     PLUS                    {: RESULT = new AST_BINOP(1);:}
                    | MINUS                    {: RESULT = new AST_BINOP(2);:}
                    | TIMES                    {: RESULT = new AST_BINOP(3);:}
                    | DIVIDE                    {: RESULT = new AST_BINOP(4);:}
                    | EQ                    {: RESULT = new AST_BINOP(5);:}
                    | LT                    {: RESULT = new AST_BINOP(6);:}
                    | GT                    {: RESULT = new AST_BINOP(7);:}
                    ;
