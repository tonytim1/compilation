/*************/
/* IMPORT(S); */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with stmtList;

/********************/
/* DERIVATION RULES */
/********************/

program ::= dec:d {: RESULT = new PROGRAM_SIMPLE(d,null); :}
            | dec:d program:p {: RESULT = new PROGRAM(d,p); :}
            ;

dec ::= varDec:v {: RESULT = new AST_VAR_DEC(v); :}
        | funcDec:f {: RESULT = new AST_FUNC_DEC(f); :}
        | classDec:c {: RESULT = new AST_CLASS_DEC(c); :}
        | ARRAY:a ID:name ASSIGN type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF_1(a, name, t); :}
        ;

arrayTypeDef ::= ARRAY:a ID:name ASSIGN type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF_1(a, name, t); :}
        ;

varDec ::= type:t ID:name {: RESULT = new VAR_DEC_NO_ASS(t, id); :}
           | type:t ID:name ASSIGN exp:e {: RESULT = new VAR_DEC_ASS(t, id, e); :}
           | type:t ID:name ASSIGN newExp:e {: RESULT = new VAR_DEC_NEW_ASS(t, id, e); :}
           ;

funcDec ::= type:t ID:name LPAREN typeID:tid RPAREN LBRACE stmtList:st RBRACE {: RESULT = new FUNC_DEC_STMT(t, tid, name, s); :}
            | type:t ID:name LPAREN RPAREN LBRACE stmtList:st RBRACE {: RESULT = new FUNC_DEC_STMT(t, null, name, s); :}
            ;

typeID ::= type:t ID:name {: RESULT = new TYPE_ID_SIMPLE(t, name); :}
           type:t ID:name COMMA typeID:tid { RESULT = new TYPE_ID(t, name, tid); :}
           ;

classDec ::= CLASS ID:name LBRACE cFieldList:c RBRACE {: RESULT = new CLASS_DEC(name, null, c); :}
             CLASS ID:name EXTENDS ID:name2 LBRACE cFieldList:c RBRACE {: RESULT = new CLASS_DEC(name, name2, c); :}
             ;

cField ::= varDec:v {: RESULT = new AST_VAR_DEC(v); :}
            | funcDec:f {: RESULT = new AST_FUNC_DEC(f); :}
            ;

cFieldList	::=		cField:c	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(c,l);    :}
					| cField:c				{: RESULT = new AST_CFIELD_LIST(c,null); :}
					;


stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		varDec:v {: RESULT = new AST_VAR_DEC(v); :}
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_EXP(v,e); :}
                    | var:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_NEW_EXP(v,e); :}
                    | RETURN exp:e SEMICOLON								{: RESULT = new AST_STMT_RETURN(v,e); :}
                    | RETURN SEMICOLON								{: RESULT = new AST_STMT_RETURN(v,null); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| varIdExp:v SEMICOLON                         {: REULST = new AST_VAR_ID_EXP(v); :}
					;

expList ::=         exp:e COMMA expList:l		{: RESULT = new AST_EXP_LIST(e,l);    :}
					| exp:e				        {: RESULT = new AST_EXP_LIST(e,null); :}
					;


exp			::=		var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_BINOP(e);:}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
                    | varIdExp:v                          {: REULST = new AST_VAR_ID_EXP(v); :}
                    | int:i                             {: RESULT = new AST_INT(i, 0); :}
                    | MINUS int:i                       {: RESULT = new AST_INT(i, 1); :}
                    | NIL                             {: RESULT = new AST_NIL(); :}
                    | string:s                             {: RESULT = new AST_STRING(s); :}
                    ;

newExp      ::=     NEW type:t                          {: RESULT = new AST_NEW_EXP(t, null); :}
                    | NEW type:t LBRACK exp:e RBRACK    {: RESULT = new AST_NEW_EXP(t, e); :}

varIdExp   ::=      ID LPAREN expList:e RPAREN    {: RESULT = new AST_EXP_LIST(e); :}
                    | ID LPAREN RPAREN    {: RESULT = new AST_EXP_LIST(null); :}
                    | var:v DOT ID LPAREN RPAREN    {: RESULT = new AST_VAR_EXP_LIST(v, null); :}
                    | var:v DOT ID LPAREN expList:e RPAREN    {: RESULT = new AST_VAR_EXP_LIST(v, e); :}

